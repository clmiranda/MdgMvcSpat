@model ResetPassword
@await Html.PartialAsync("~/Views/RenderSweetAlert.cshtml")
<style>
    .form-group i {
        cursor: pointer;
    }
</style>
<div class="row">
    <div class="col-lg-6 mx-auto">
        <div class="card border-0 rounded shadow-lg">
            <p class="card-header text-center">Reestablecer Contrase&ntilde;a</p>
            <div class="card-body p-5">
                <form autocomplete="off" asp-action="SendDataResetPassword" onsubmit="return ResetPassword(this);" method="post">
                    <input type="hidden" asp-for="Email" class="form-control" />
                    <input type="hidden" asp-for="Token" class="form-control" />
                    <div class="form-group">
                        <div class="input-group">
                            <input asp-for="Password" type="password" class="form-control form-control-user" id="idPassword" name="Password" placeholder="Ingresa tu Nueva Contraseña" autocomplete="off" autofocus>
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="far fa-eye"></i></span>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                        <ul>
                            <li id="charac">Requiere M&iacute;nimo 8 caracteres</li>
                            <li id="lower">Necesita una Min&uacute;scula</li>
                            <li id="mayus">Necesita una May&uacute;scula</li>
                            <li id="numbe">Necesita un N&uacute;mero (0-9)</li>
                            <li id="special">Necesita un Caracter Especial (*,+)</li>
                        </ul>
                    </div>
                    <div class="form-group">
                        <input asp-for="ConfirmPassword" type="password" class="form-control form-control-user" id="idConfirmPassword" name="ConfirmPassword" autocomplete="off" placeholder="Repite tu nueva Contraseña">
                        @Html.ValidationMessageFor(x => x.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                    <button class="btn btn-primary btn-user btn-block" type="submit">
                        Confirmar
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    var _0x26f3 = ['click', '359487AbMxTF', 'setAttribute', 'hide', 'keyup', '1koYhOB', '8sJazRo', 'POST', '#lower', 'href', 'ajax', 'ready', 'toggle', 'valid', 'val', 'show', '#idPassword', 'location', '#charac', 'form', 'url', '56ruGNNj', 'querySelector', 'type', 'addEventListener', 'text', '4gseczn', 'html', '2428529WLlkRO', '5givWDG', 'getAttribute', '^(?=.*[A-Z])', 'status', '/Error/', 'password', '300754biNpDd', 'action', '318199tDVVZZ', 'classList', '^(?=.*[-!$%^&*()\x5c\x5c@@#_+|~=`{}:\x22;\x27<>?,./])', '1625nubpHt', '337063nMmlsz', '8660LllVkd', '#mayus', '.fa-eye', '5mUhDfo']; var _0x35e77d = _0x4a78; (function (_0xd7cbad, _0x381c2e) { var _0x4d24ef = _0x4a78; while (!![]) { try { var _0x1961e0 = parseInt(_0x4d24ef(0x17c)) * -parseInt(_0x4d24ef(0x176)) + -parseInt(_0x4d24ef(0x173)) * -parseInt(_0x4d24ef(0x15a)) + -parseInt(_0x4d24ef(0x158)) * parseInt(_0x4d24ef(0x150)) + parseInt(_0x4d24ef(0x15f)) * -parseInt(_0x4d24ef(0x153)) + -parseInt(_0x4d24ef(0x155)) * -parseInt(_0x4d24ef(0x16e)) + -parseInt(_0x4d24ef(0x154)) + -parseInt(_0x4d24ef(0x15e)) * -parseInt(_0x4d24ef(0x175)); if (_0x1961e0 === _0x381c2e) break; else _0xd7cbad['push'](_0xd7cbad['shift']()); } catch (_0x3a91d8) { _0xd7cbad['push'](_0xd7cbad['shift']()); } } }(_0x26f3, 0xdd571)); function _0x4a78(_0x368d54, _0x49bd5c) { return _0x4a78 = function (_0x26f395, _0x4a7890) { _0x26f395 = _0x26f395 - 0x150; var _0x397b38 = _0x26f3[_0x26f395]; return _0x397b38; }, _0x4a78(_0x368d54, _0x49bd5c); } var togglePassword = document['querySelector'](_0x35e77d(0x157)), password = document[_0x35e77d(0x16f)](_0x35e77d(0x169)); togglePassword[_0x35e77d(0x171)](_0x35e77d(0x159), function (_0x59df4a) { var _0xc3a698 = _0x35e77d, _0x585419 = password[_0xc3a698(0x177)]('type') === _0xc3a698(0x17b) ? _0xc3a698(0x172) : _0xc3a698(0x17b); password[_0xc3a698(0x15b)](_0xc3a698(0x170), _0x585419), this[_0xc3a698(0x151)][_0xc3a698(0x165)]('fa-eye-slash'); }), $(document)[_0x35e77d(0x164)](function () { var _0xce10d9 = _0x35e77d, _0x180ed6 = new RegExp(_0xce10d9(0x178)), _0x1d7a81 = new RegExp(_0xce10d9(0x152)), _0x3e86d9 = new RegExp('^(?=.*[0-9])'), _0x5ab2dc = new RegExp('^(?=.*[a-z])'), _0x48b9e7 = new RegExp('^(?=.{8,})'), _0x549419 = [_0x180ed6, _0x1d7a81, _0x3e86d9, _0x5ab2dc, _0x48b9e7], _0x147491 = [$(_0xce10d9(0x156)), $('#special'), $('#numbe'), $(_0xce10d9(0x161)), $(_0xce10d9(0x16b))]; $(_0xce10d9(0x169))['on'](_0xce10d9(0x15d), function () { var _0xdc8e72 = _0xce10d9, _0x544c5e = $(_0xdc8e72(0x169))[_0xdc8e72(0x167)](); for (var _0x531c69 = 0x0; _0x531c69 < 0x5; _0x531c69++) { _0x549419[_0x531c69]['test'](_0x544c5e) ? _0x147491[_0x531c69][_0xdc8e72(0x15c)]() : _0x147491[_0x531c69][_0xdc8e72(0x168)](); } }); }), ResetPassword = _0x4ee853 => { var _0x48f921 = _0x35e77d; event['preventDefault'](); if ($(_0x48f921(0x16c))[_0x48f921(0x166)]()) return $[_0x48f921(0x163)]({ 'type': _0x48f921(0x160), 'url': _0x4ee853[_0x48f921(0x17d)], 'data': new FormData(_0x4ee853), 'contentType': ![], 'processData': ![], 'success': function (_0x5b819c) { var _0x4fd51a = _0x48f921; if (_0x5b819c['html'] != null) $('#body-content-action')[_0x4fd51a(0x174)](_0x5b819c[_0x4fd51a(0x174)]); else _0x5b819c[_0x4fd51a(0x16d)] != null && (window[_0x4fd51a(0x16a)][_0x4fd51a(0x162)] = _0x5b819c[_0x4fd51a(0x16d)]); } })['fail'](function (_0x312161, _0xaed8bc, _0x37f853) { var _0x2d1baf = _0x48f921; window[_0x2d1baf(0x16a)]['href'] = _0x2d1baf(0x17a) + _0x312161[_0x2d1baf(0x179)]; }), ![]; };
</script>